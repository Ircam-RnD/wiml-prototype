'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _socketIoClient = require('socket.io-client');

var _socketIoClient2 = _interopRequireDefault(_socketIoClient);

var _motionInput = require('motion-input');

var _motionInput2 = _interopRequireDefault(_motionInput);

var _wavesLfo = require('waves-lfo');

var _wavesLfo2 = _interopRequireDefault(_wavesLfo);

var _commonLfoInputProcessingChain = require('../common/lfo-input-processing-chain');

var _commonLfoInputProcessingChain2 = _interopRequireDefault(_commonLfoInputProcessingChain);

var _commonLfoDataRecorder = require('../common/lfo-data-recorder');

var _commonLfoDataRecorder2 = _interopRequireDefault(_commonLfoDataRecorder);

var _commonLfoXmmGmmDecoder = require('../common/lfo-xmm-gmm-decoder');

var _commonLfoXmmGmmDecoder2 = _interopRequireDefault(_commonLfoXmmGmmDecoder);

// ==================== DOM elements =================== //

var recbut = document.querySelector('#rec-but');
var sendbut = document.querySelector('#send-but');
sendbut.disabled = true;
//let trainbut = document.querySelector('#train-but');
var getmodelsbut = document.querySelector('#getmodels-but');
var movelist = document.querySelector('#move-list');
var likeliest = document.querySelector('#likeliest-label-div');

// ===================== lfop graph ==================== //

var inputChain = new _commonLfoInputProcessingChain2['default']({
	windowSize: 256,
	hopSize: 16
});
//frameSize: 1
var dataRecorder = new _commonLfoDataRecorder2['default']({
	separateArrays: true
});
var gmmDecoder = new _commonLfoXmmGmmDecoder2['default']({
	likelihoodWindow: 3
});

var featuresBpf = new _wavesLfo2['default'].sinks.Bpf({
	radius: 5,
	min: 0,
	max: 1,
	canvas: document.querySelector('#features-canvas'),
	duration: 10 * inputChain.params.hopSize * inputChain.params.period,
	colors: ['#f00', '#0f0', '#00f'] // magnitude : Red, frequency : Green, periodicity : Blue
});

var signalBpf = new _wavesLfo2['default'].sinks.Bpf({
	radius: 0,
	min: 0,
	max: 1,
	canvas: document.querySelector('#signal-canvas'),
	duration: 10 * inputChain.params.hopSize * inputChain.params.period,
	colors: ['#000'] // magnitude : Red, frequency : Green, periodicity : Blue
});

/*
// temporarily unavailable ...
const likelihoodsSpectro = new lfo.sinks.Spectrogram({
//const likelihoodsSpectro = new MySpectrogram({
	scale: 10,
	canvas: document.querySelector('#likelihoods-canvas'),
	color: '#f00'
});
//*/

//*
var likelihoodsBpf = new _wavesLfo2['default'].sinks.Bpf({
	radius: 5,
	min: 0,
	max: 1,
	canvas: document.querySelector('#likelihoods-canvas'),
	duration: 10 * inputChain.params.hopSize * inputChain.params.period,
	colors: ['#f00', '#0f0', '#00f'] // magnitude : Red, frequency : Green, periodicity : Blue
});
//*/

inputChain.connect(dataRecorder);

inputChain.connect(gmmDecoder);

inputChain.preFramerConnect(signalBpf);
inputChain.connect(featuresBpf);

//gmmDecoder.connect(likelihoodsSpectro);
gmmDecoder.connect(likelihoodsBpf);

// GO !
inputChain.start();

var roundValue = function roundValue(input) {
	if (input === undefined) return 'undefined';
	if (input === null) return 'null';
	return Math.round(input * 100) / 100;
};

var feedInputChain = function feedInputChain(module) {
	if (module.isValid) {
		//*
		_motionInput2['default'].addListener('energy', function (val) {
			inputChain.process(performance.now(), val);
		});
		//*/

		//*
		_motionInput2['default'].addListener('rotationRate', function (val) {
			//here compute the equivalent of "spin" :
			var spin = Math.pow(val[0] * val[0] + val[1] * val[1] + val[2] * val[2], 0.5) * 0.1;
			inputChain.process(performance.now(), spin);
		});
		//*/
	}
};

(function () {
	_motionInput2['default'].init('energy', 'rotationRate').then(function (modules) {
		var energy = modules[0];
		var rotationRate = modules[1];
		//feedInputChain(energy);
		feedInputChain(energy);
	})['catch'](function (err) {
		return console.error(err.stack);
	});
})();

// ================= socket operations ================== //

//let socket = io.connect('http://169.254.68.117:3000');
var socket = _socketIoClient2['default'].connect(location.host + '/wiml-client');
//let socket = io.connect('127.0.0.1:3000');

socket.on('confirm', function (message) {
	console.log('server confirms reception of message :');
	console.log(message);
});

// this could be probably improved (kind of callback from xmm)
socket.on('train', function (message) {
	if (message === 'ok') {
		// training worked, can request new models
	} else {
			console.error(message);
		}
});

// update model on new model reception from server :
socket.on('models', function (models) {
	//console.log(models);
	var m = models.models;
	if (Array.isArray(m) && m.length > 0) {
		//gmmDecoder.setModel(m[m.length - 1]);
		console.log(models.message);
		console.log(m[m.length - 1]);
		gmmDecoder.setModel(m[m.length - 1]);
	} else {
		console.log(models.message);
	}
});

// =================== UI interaction =================== //

recbut.addEventListener('click', function () {
	var state = recbut.className;
	if (state === 'rec-but') {
		recbut.className = 'stop-but';
		recbut.innerHTML = 'STOP';
		sendbut.disabled = true;
		// start recording some sensor and gps data
		dataRecorder.start();
	} else {
		recbut.className = 'rec-but';
		recbut.innerHTML = 'REC';
		sendbut.disabled = false;
		// stop recording data
		dataRecorder.stop();
	}
});

sendbut.addEventListener('click', function () {
	var move = movelist.options[movelist.selectedIndex].text;
	var res = confirm('You are about to send data labeled with "' + move + '". Confirm ?');
	if (res === true) {
		// send recorded data to server :
		var phrase = dataRecorder.getRecordedPhrase();
		phrase.label = move;
		phrase.date = new Date();
		socket.emit('writePhrase', phrase);
		sendbut.disabled = true;
	} else {
		sendbut.disabled = false;
	}
});

/*
trainbut.addEventListener('click', () => {
	socket.emit('trainModels');
});

getmodelsbut.addEventListener('click', () => {
	socket.emit('getModels');
});
//*/

getmodelsbut.addEventListener('click', function () {
	socket.emit('trainModels');
});

(function () {
	var updateLikeliest = function updateLikeliest(del) {
		likeliest.innerHTML = gmmDecoder.likeliestLabel;
		setTimeout(updateLikeliest, del);
	};

	updateLikeliest(200);
})();

// =============== sensors simulation for desktop ============== //
//*
(function () {

	function generandom() {
		var ret = [];
		for (var i = 0; i < 1; i++) {
			ret.push(Math.random() * 2 - 1);
		}

		var v = Math.random() * 2 - 1;
		inputChain.process(null, v);

		delay(Math.random() * 10 + 100);
	}

	function delay(del) {
		setTimeout(generandom, del);
	}

	// uncomment to send random signal if no sensors available :
	// generandom();
})();
//*/
//# sourceMappingURL=data:application/json;base64,