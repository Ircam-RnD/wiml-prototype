'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _socketIoClient = require('socket.io-client');

var _socketIoClient2 = _interopRequireDefault(_socketIoClient);

var _wavesLfo = require('waves-lfo');

var _wavesLfo2 = _interopRequireDefault(_wavesLfo);

//window.location.href = window.location.pathname + window.location.search;

//===================== CooooooKies ! ===================//

var setCookie = function setCookie(cname, cvalue, exdays) {
	var d = new Date();
	d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
	var expires = "expires=" + d.toGMTString();
	document.cookie = cname + "=" + cvalue + "; " + expires + "; path=/";
};

var getCookie = function getCookie(cname) {
	var name = cname + "=";
	var ca = document.cookie.split(';');
	for (var i = 0; i < ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0) == ' ') c = c.substring(1);
		if (c.indexOf(name) == 0) {
			return c.substring(name.length, c.length);
		}
	}
	return "";
};

var checkCookie = function checkCookie() {
	var user = getCookie("username");
	if (user != "") {
		alert("Welcome again " + user);
	} else {
		user = prompt("Please enter your name:", "");
		if (user != "" && user != null) {
			setCookie("username", user, 30);
		}
	}
};

//checkCookie();

// let clearmodelsbut = document.querySelector('#clearmodels-but');
// let clearphrasesbut = document.querySelector('#clearphrases-but');
var clearallbut = document.querySelector('#clearall-but');

var socket = _socketIoClient2['default'].connect(location.host + '/wiml-admin');

// clearmodelsbut.addEventListener('click', () => {
// 	socket.emit('clearModels');
// });

// clearphrasesbut.addEventListener('click', () => {
// 	socket.emit('clearPhrases');
// });

clearallbut.addEventListener('click', function () {
	socket.emit('clearAll');
});

// responses :
socket.on('clear', function (data) {
	console.log(data.message);
	socket.emit('refreshPhrases');
});

var lfoPhrases = [];
var phrasesDiv = document.querySelector('.phrases-div');
var AudioContext = window.AudioContext || window.webkitAudioContext || function () {};
var context = new AudioContext();

socket.on('phrases', function (phrases) {

	lfoPhrases = [];
	while (phrasesDiv.firstChild) {
		phrasesDiv.removeChild(phrasesDiv.firstChild);
	}

	var p = phrases.phrases;
	if (Array.isArray(p) && p.length > 0) {
		//console.log(p);
		console.log(phrases.message);
		console.log(p[p.length - 1]);
	} else {
		console.log(phrases.message);
	}

	for (var i = 0; i < p.length; i++) {

		var cd1 = document.createElement('div');
		cd1.setAttribute('class', 'clear-div');
		var c = document.createElement('canvas');
		c.setAttribute('id', 'phrase-' + i);
		cd1.appendChild(c);
		phrasesDiv.appendChild(cd1);

		var cd2 = document.createElement('div');
		cd2.setAttribute('class', 'canvas-legend');
		cd2.innerHTML = p[i].label + '<br />' + p[i].date + '<br />';
		phrasesDiv.appendChild(cd2);
		phrasesDiv.appendChild(document.createElement('br'));

		var evin = new _wavesLfo2['default'].sources.EventIn({
			frameSize: 1,
			frameRate: 1,
			ctx: context
		});

		var framer = new _wavesLfo2['default'].operators.Framer({
			frameSize: p[i].dimension,
			hopSize: p[i].dimension
		});

		var bpf = new _wavesLfo2['default'].sinks.Bpf({
			trigger: true,
			radius: 5,
			frameSize: p[i].dimension,
			min: 0,
			max: 1,
			canvas: document.querySelector('#phrase-' + i),
			duration: 1000 * (p[i].data.length - p[i].dimension),
			colors: ['#f00', '#0c0', '#33f'] // magnitude : R, frequency : G, periodicity : B
		});

		evin.connect(framer);
		framer.connect(bpf);

		//evin.initialize({ frameSize: 1, frameRate: 1000 });
		//framer.initialize({ frameSize: p[i].dimension });
		evin.start();

		var date = Date.now();
		var arrayin = new Float32Array(1);

		for (var j = 0; j < p[i].data.length; j++) {
			arrayin[0] = p[i].data[j];
			evin.process(j * 1000, arrayin);
		}

		lfoPhrases.push(bpf);

		framer.disconnect(bpf);
		evin.stop();
	}
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jbGllbnQvd2ltbC1hZG1pbi9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OzhCQUFlLGtCQUFrQjs7Ozt3QkFDakIsV0FBVzs7Ozs7Ozs7QUFNM0IsSUFBTSxTQUFTLEdBQUcsU0FBWixTQUFTLENBQUksS0FBSyxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUs7QUFDdkMsS0FBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNuQixFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBSSxNQUFNLEdBQUMsRUFBRSxHQUFDLEVBQUUsR0FBQyxFQUFFLEdBQUMsSUFBSSxBQUFDLENBQUMsQ0FBQztBQUNoRCxLQUFJLE9BQU8sR0FBRyxVQUFVLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzNDLFNBQVEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFDLEdBQUcsR0FBQyxNQUFNLEdBQUMsSUFBSSxHQUFDLE9BQU8sR0FBQyxVQUFVLENBQUM7Q0FDOUQsQ0FBQTs7QUFFRCxJQUFNLFNBQVMsR0FBRyxTQUFaLFNBQVMsQ0FBSSxLQUFLLEVBQUs7QUFDekIsS0FBSSxJQUFJLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUN2QixLQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNwQyxNQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMzQixNQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDZCxTQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVDLE1BQUksQ0FBQyxDQUFDLE9BQU8sQ0FB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bGUiOiJzcmMvY2xpZW50L3dpbWwtYWRtaW4vaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaW8gZnJvbSAnc29ja2V0LmlvLWNsaWVudCc7XG5pbXBvcnQgbGZvIGZyb20gJ3dhdmVzLWxmbyc7XG5cbi8vd2luZG93LmxvY2F0aW9uLmhyZWYgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PSBDb29vb29vS2llcyAhID09PT09PT09PT09PT09PT09PT0vL1xuXG5jb25zdCBzZXRDb29raWUgPSAoY25hbWUsY3ZhbHVlLGV4ZGF5cykgPT4ge1xuICAgIGxldCBkID0gbmV3IERhdGUoKTtcbiAgICBkLnNldFRpbWUoZC5nZXRUaW1lKCkgKyAoZXhkYXlzKjI0KjYwKjYwKjEwMDApKTtcbiAgICBsZXQgZXhwaXJlcyA9IFwiZXhwaXJlcz1cIiArIGQudG9HTVRTdHJpbmcoKTtcbiAgICBkb2N1bWVudC5jb29raWUgPSBjbmFtZStcIj1cIitjdmFsdWUrXCI7IFwiK2V4cGlyZXMrXCI7IHBhdGg9L1wiO1xufVxuXG5jb25zdCBnZXRDb29raWUgPSAoY25hbWUpID0+IHtcbiAgICBsZXQgbmFtZSA9IGNuYW1lICsgXCI9XCI7XG4gICAgbGV0IGNhID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XG4gICAgZm9yKGxldCBpPTA7IGk8Y2EubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGMgPSBjYVtpXTtcbiAgICAgICAgd2hpbGUgKGMuY2hhckF0KDApPT0nICcpIGMgPSBjLnN1YnN0cmluZygxKTtcbiAgICAgICAgaWYgKGMuaW5kZXhPZihuYW1lKSA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYy5zdWJzdHJpbmcobmFtZS5sZW5ndGgsIGMubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gXCJcIjtcbn1cblxuY29uc3QgY2hlY2tDb29raWUgPSAoKSA9PiB7XG4gICAgbGV0IHVzZXI9Z2V0Q29va2llKFwidXNlcm5hbWVcIik7XG4gICAgaWYgKHVzZXIgIT0gXCJcIikge1xuICAgICAgICBhbGVydChcIldlbGNvbWUgYWdhaW4gXCIgKyB1c2VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgIHVzZXIgPSBwcm9tcHQoXCJQbGVhc2UgZW50ZXIgeW91ciBuYW1lOlwiLFwiXCIpO1xuICAgICAgIGlmICh1c2VyICE9IFwiXCIgJiYgdXNlciAhPSBudWxsKSB7XG4gICAgICAgICAgIHNldENvb2tpZShcInVzZXJuYW1lXCIsIHVzZXIsIDMwKTtcbiAgICAgICB9XG4gICAgfVxufVxuXG4vL2NoZWNrQ29va2llKCk7IFxuXG4vLyBsZXQgY2xlYXJtb2RlbHNidXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2xlYXJtb2RlbHMtYnV0Jyk7XG4vLyBsZXQgY2xlYXJwaHJhc2VzYnV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NsZWFycGhyYXNlcy1idXQnKTtcbmxldCBjbGVhcmFsbGJ1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjbGVhcmFsbC1idXQnKTtcblxubGV0IHNvY2tldCA9IGlvLmNvbm5lY3QobG9jYXRpb24uaG9zdCArICcvd2ltbC1hZG1pbicpO1xuXG4vLyBjbGVhcm1vZGVsc2J1dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbi8vIFx0c29ja2V0LmVtaXQoJ2NsZWFyTW9kZWxzJyk7XG4vLyB9KTtcblxuLy8gY2xlYXJwaHJhc2VzYnV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuLy8gXHRzb2NrZXQuZW1pdCgnY2xlYXJQaHJhc2VzJyk7XG4vLyB9KTtcblxuY2xlYXJhbGxidXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG5cdHNvY2tldC5lbWl0KCdjbGVhckFsbCcpO1xufSk7XG5cbi8vIHJlc3BvbnNlcyA6XG5zb2NrZXQub24oJ2NsZWFyJywgKGRhdGEpID0+IHtcblx0Y29uc29sZS5sb2coZGF0YS5tZXNzYWdlKTtcblx0c29ja2V0LmVtaXQoJ3JlZnJlc2hQaHJhc2VzJyk7XG59KTtcblxubGV0IGxmb1BocmFzZXMgPSBbXTtcbmxldCBwaHJhc2VzRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBocmFzZXMtZGl2Jyk7XG5sZXQgQXVkaW9Db250ZXh0ID0gd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0IHx8IGZ1bmN0aW9uKCl7fTtcbmxldCBjb250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuXG5cbnNvY2tldC5vbigncGhyYXNlcycsIChwaHJhc2VzKSA9PiB7XG5cblx0bGZvUGhyYXNlcyA9IFtdO1xuXHR3aGlsZShwaHJhc2VzRGl2LmZpcnN0Q2hpbGQpIHtcblx0XHRwaHJhc2VzRGl2LnJlbW92ZUNoaWxkKHBocmFzZXNEaXYuZmlyc3RDaGlsZCk7XG5cdH1cblxuXHRsZXQgcCA9IHBocmFzZXMucGhyYXNlcztcblx0aWYoQXJyYXkuaXNBcnJheShwKSAmJiBwLmxlbmd0aCA+IDApIHtcblx0XHQvL2NvbnNvbGUubG9nKHApO1xuXHRcdGNvbnNvbGUubG9nKHBocmFzZXMubWVzc2FnZSk7XG5cdFx0Y29uc29sZS5sb2cocFtwLmxlbmd0aCAtIDFdKTtcblx0fSBlbHNlIHtcblx0XHRjb25zb2xlLmxvZyhwaHJhc2VzLm1lc3NhZ2UpO1xuXHR9XG5cblx0Zm9yKGxldCBpPTA7IGk8cC5sZW5ndGg7IGkrKykge1xuXG5cdFx0Y29uc3QgY2QxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0Y2QxLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2xlYXItZGl2Jyk7XG5cdFx0Y29uc3QgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXHRcdGMuc2V0QXR0cmlidXRlKCdpZCcsICdwaHJhc2UtJyArIGkpO1xuXHRcdGNkMS5hcHBlbmRDaGlsZChjKTtcblx0XHRwaHJhc2VzRGl2LmFwcGVuZENoaWxkKGNkMSk7XG5cblx0XHRjb25zdCBjZDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRjZDIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjYW52YXMtbGVnZW5kJyk7XG5cdFx0Y2QyLmlubmVySFRNTCA9IHBbaV0ubGFiZWwgKyAnPGJyIC8+JyArIHBbaV0uZGF0ZSArICc8YnIgLz4nO1xuXHRcdHBocmFzZXNEaXYuYXBwZW5kQ2hpbGQoY2QyKTtcblx0XHRwaHJhc2VzRGl2LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JyJykpO1xuXG5cdFx0bGV0IGV2aW4gPSBuZXcgbGZvLnNvdXJjZXMuRXZlbnRJbih7XG5cdFx0XHRmcmFtZVNpemU6IDEsXG5cdFx0XHRmcmFtZVJhdGU6IDEsXG5cdFx0XHRjdHg6IGNvbnRleHRcblx0XHR9KTtcblxuXHRcdGxldCBmcmFtZXIgPSBuZXcgbGZvLm9wZXJhdG9ycy5GcmFtZXIoe1xuXHRcdFx0ZnJhbWVTaXplOiBwW2ldLmRpbWVuc2lvbixcblx0XHRcdGhvcFNpemU6IHBbaV0uZGltZW5zaW9uXG5cdFx0fSk7XG5cblx0XHRjb25zdCBicGYgPSBuZXcgbGZvLnNpbmtzLkJwZih7XG5cdFx0XHR0cmlnZ2VyOiB0cnVlLFxuXHRcdFx0cmFkaXVzOiA1LFxuXHRcdFx0ZnJhbWVTaXplOiBwW2ldLmRpbWVuc2lvbixcblx0XHRcdG1pbjogMCxcblx0XHRcdG1heDogMSxcblx0XHRcdGNhbnZhczogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BocmFzZS0nICsgaSksXG5cdFx0XHRkdXJhdGlvbjogMTAwMCAqIChwW2ldLmRhdGEubGVuZ3RoIC0gcFtpXS5kaW1lbnNpb24pLFxuXHRcdFx0Y29sb3JzOiBbJyNmMDAnLCAnIzBjMCcsICcjMzNmJ10gLy8gbWFnbml0dWRlIDogUiwgZnJlcXVlbmN5IDogRywgcGVyaW9kaWNpdHkgOiBCXG5cdFx0fSlcblxuXHRcdGV2aW4uY29ubmVjdChmcmFtZXIpO1xuXHRcdGZyYW1lci5jb25uZWN0KGJwZik7XG5cblx0XHQvL2V2aW4uaW5pdGlhbGl6ZSh7IGZyYW1lU2l6ZTogMSwgZnJhbWVSYXRlOiAxMDAwIH0pO1xuXHRcdC8vZnJhbWVyLmluaXRpYWxpemUoeyBmcmFtZVNpemU6IHBbaV0uZGltZW5zaW9uIH0pO1xuXHRcdGV2aW4uc3RhcnQoKTtcblxuXHRcdGxldCBkYXRlID0gRGF0ZS5ub3coKTtcblx0XHRsZXQgYXJyYXlpbiA9IG5ldyBGbG9hdDMyQXJyYXkoMSk7XG5cblx0XHRmb3IobGV0IGo9MDsgajxwW2ldLmRhdGEubGVuZ3RoOyBqKyspIHtcblx0XHRcdGFycmF5aW5bMF0gPSBwW2ldLmRhdGFbal07XG5cdFx0XHRldmluLnByb2Nlc3MoaiAqIDEwMDAsIGFycmF5aW4pO1xuXHRcdH1cblxuXG5cdFx0bGZvUGhyYXNlcy5wdXNoKGJwZik7XG5cblx0XHRmcmFtZXIuZGlzY29ubmVjdChicGYpO1xuXHRcdGV2aW4uc3RvcCgpO1xuXHR9XG59KTsiXX0=