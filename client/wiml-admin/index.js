'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _socketIoClient = require('socket.io-client');

var _socketIoClient2 = _interopRequireDefault(_socketIoClient);

var _wavesLfo = require('waves-lfo');

var _wavesLfo2 = _interopRequireDefault(_wavesLfo);

// let clearmodelsbut = document.querySelector('#clearmodels-but');
// let clearphrasesbut = document.querySelector('#clearphrases-but');
var clearallbut = document.querySelector('#clearall-but');

var socket = _socketIoClient2['default'].connect(location.host + '/wiml-admin');

// clearmodelsbut.addEventListener('click', () => {
// 	socket.emit('clearModels');
// });

// clearphrasesbut.addEventListener('click', () => {
// 	socket.emit('clearPhrases');
// });

clearallbut.addEventListener('click', function () {
	socket.emit('clearAll');
});

// responses :
socket.on('clear', function (data) {
	console.log(data.message);
	socket.emit('refreshPhrases');
});

var lfoPhrases = [];
var phrasesDiv = document.querySelector('.phrases-div');
var AudioContext = window.AudioContext || window.webkitAudioContext || function () {};
var context = new AudioContext();

socket.on('phrases', function (phrases) {

	lfoPhrases = [];
	while (phrasesDiv.firstChild) {
		phrasesDiv.removeChild(phrasesDiv.firstChild);
	}

	var p = phrases.phrases;
	if (Array.isArray(p) && p.length > 0) {
		//console.log(p);
		console.log(phrases.message);
		console.log(p[p.length - 1]);
	} else {
		console.log(phrases.message);
	}

	for (var i = 0; i < p.length; i++) {

		var cd1 = document.createElement('div');
		cd1.setAttribute('class', 'clear-div');
		var c = document.createElement('canvas');
		c.setAttribute('id', 'phrase-' + i);
		cd1.appendChild(c);
		phrasesDiv.appendChild(cd1);

		var cd2 = document.createElement('div');
		cd2.setAttribute('class', 'canvas-legend');
		cd2.innerHTML = p[i].label + '<br />' + p[i].date + '<br />';
		phrasesDiv.appendChild(cd2);
		phrasesDiv.appendChild(document.createElement('br'));

		var evin = new _wavesLfo2['default'].sources.EventIn({
			frameSize: 1,
			frameRate: 1,
			ctx: context
		});

		var framer = new _wavesLfo2['default'].operators.Framer({
			frameSize: p[i].dimension,
			hopSize: p[i].dimension
		});

		var bpf = new _wavesLfo2['default'].sinks.Bpf({
			trigger: true,
			radius: 5,
			frameSize: p[i].dimension,
			min: 0,
			max: 1,
			canvas: document.querySelector('#phrase-' + i),
			duration: 1000 * (p[i].data.length - p[i].dimension),
			colors: ['#f00', '#0c0', '#33f'] // magnitude : R, frequency : G, periodicity : B
		});

		evin.connect(framer);
		framer.connect(bpf);

		//evin.initialize({ frameSize: 1, frameRate: 1000 });
		//framer.initialize({ frameSize: p[i].dimension });
		evin.start();

		var date = Date.now();
		var arrayin = new Float32Array(1);

		for (var j = 0; j < p[i].data.length; j++) {
			arrayin[0] = p[i].data[j];
			evin.process(j * 1000, arrayin);
		}

		lfoPhrases.push(bpf);

		framer.disconnect(bpf);
		evin.stop();
	}
});
//# sourceMappingURL=data:application/json;base64,