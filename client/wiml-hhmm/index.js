'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _socketIoClient = require('socket.io-client');

var _socketIoClient2 = _interopRequireDefault(_socketIoClient);

var _motionInput = require('motion-input');

var _motionInput2 = _interopRequireDefault(_motionInput);

var _wavesLfo = require('waves-lfo');

var lfo = _interopRequireWildcard(_wavesLfo);

var _commonLfoResampler = require('../common/lfo-resampler');

var _commonLfoResampler2 = _interopRequireDefault(_commonLfoResampler);

var _commonLfoSelect = require('../common/lfo-select');

var _commonLfoSelect2 = _interopRequireDefault(_commonLfoSelect);

var _commonLfoDataRecorder = require('../common/lfo-data-recorder');

var _commonLfoDataRecorder2 = _interopRequireDefault(_commonLfoDataRecorder);

var _commonLfoXmmHhmmDecoder = require('../common/lfo-xmm-hhmm-decoder');

var _commonLfoXmmHhmmDecoder2 = _interopRequireDefault(_commonLfoXmmHhmmDecoder);

var AudioContext = window.AudioContext || window.webkitAudioContext || function () {};

// from : http://stackoverflow.com/questions/5916900/how-can-you-detect-the-version-of-a-browser
function getBrowser() {
	var ua = navigator.userAgent,
	    tem,
	    M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
	if (/trident/i.test(M[1])) {
		tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
		return { name: 'IE', version: tem[1] || '' };
	}
	if (M[1] === 'Chrome') {
		tem = ua.match(/\bOPR\/(\d+)/);
		if (tem != null) {
			return { name: 'Opera', version: tem[1] };
		}
	}
	M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
	if ((tem = ua.match(/version\/(\d+)/i)) != null) {
		M.splice(1, 1, tem[1]);
	}
	return {
		name: M[0],
		version: M[1]
	};
}

//and for os (in case), see : http://stackoverflow.com/questions/9514179/how-to-find-the-operating-system-version-using-javascript

var rads = false;
if (getBrowser().name === 'Chrome') {
	rads = true;
	console.log('switching to rads mode for rotationRate');
}

var recbut = document.querySelector('#rec-but');
var sendbut = document.querySelector('#send-but');
sendbut.disabled = true;
//let trainbut = document.querySelector('#train-but');
var getmodelsbut = document.querySelector('#getmodels-but');
var movelist = document.querySelector('#move-list');
var likeliest = document.querySelector('#likeliest-label-div');

//======================== LFOp's =======================//

var eventIn = new lfo.sources.EventIn({
	frameSize: 6,
	ctx: AudioContext
});

var resampler = new _commonLfoResampler2['default']({});

var dataRecorder = new _commonLfoDataRecorder2['default']({
	column_names: ['accelX', 'accelY', 'accelZ', 'rotX', 'rotY', 'rotZ']
});

var hhmmDecoder = new _commonLfoXmmHhmmDecoder2['default']({});

var select = new _commonLfoSelect2['default']({
	mode: "passthru" // anything else than "include" or "exclude" passes through
});

var inputBpf = new lfo.sinks.Bpf({
	radius: 0,
	min: -4,
	max: 4,
	canvas: document.querySelector('#rawinput-canvas'),
	duration: 1000, // * inputChain.params.hopSize * inputChain.params.period,
	colors: ['#f00', '#0c0', '#33f', '#333', '#333', '#333'] // magnitude : Red, frequency : Green, periodicity : Blue	
});

var likelihoodsSpectro = new lfo.sinks.Spectrogram({
	scale: 1,
	min: 0,
	max: 1,
	canvas: document.querySelector('#likelihoods-canvas'),
	duration: 1000,
	color: '#333'
});

var statesSpectro = new lfo.sinks.Spectrogram({
	scale: 1,
	canvas: document.querySelector('#states-canvas'),
	duration: 1000,
	color: '#333'
});

eventIn.connect(resampler);

resampler.connect(inputBpf);

resampler.connect(dataRecorder);

resampler.connect(hhmmDecoder);
hhmmDecoder.connect(likelihoodsSpectro);
hhmmDecoder.connect(statesSpectro);

eventIn.start();

//======================================================//

var sensors = new Array(6);
for (var i = 0; i < 6; i++) {
	sensors[i] = 0;
}

var feedInputChain = function feedInputChain(module) {
	if (module.isValid) {

		//*
		_motionInput2['default'].addListener('acceleration', function (val) {
			//inputChain.process(performance.now(), val);
			for (var i = 0; i < 3; i++) {
				sensors[i] = val[i];
			}
			eventIn.process(performance.now(), sensors);
			//console.log(sensors);
		});
		//*/

		//*
		_motionInput2['default'].addListener('rotationRate', function (val) {
			//here compute the equivalent of "spin" :
			var valStd = val.slice(0);
			if (rads) {
				for (var i = 0; i < 3; i++) {
					valStd[i] *= 180 / Math.PI;
				}
			}
			var spin = Math.pow(valStd[0] * valStd[0] + valStd[1] * valStd[1] + valStd[2] * valStd[2], 0.5) * 0.003;
			//inputChain.process(performance.now(), spin);

			// THE REAL CODE :
			for (var i = 0; i < 3; i++) {
				sensors[i + 3] = val[i];
			}
			eventIn.process(performance.now(), sensors);
			//console.log(sensors);
		});
		//*/
	}
};

(function () {
	_motionInput2['default'].init('acceleration',
	//'accelerationIncludingGravity',
	'rotationRate').then(function (modules) {
		var acceleration = modules[0];
		var rotationRate = modules[1];
		feedInputChain(acceleration);
		feedInputChain(rotationRate);
	})['catch'](function (err) {
		return console.error(err.stack);
	});
})();

// ================= socket operations ================== //

//let socket = io.connect('http://169.254.68.117:3000');
var socket = _socketIoClient2['default'].connect(location.host + '/wiml-hhmm');
//let socket = io.connect('127.0.0.1:3000');

socket.on('confirm', function (message) {
	console.log('server confirms reception of message :');
	console.log(message);
});

// this could be probably improved (kind of callback from xmm)
socket.on('train', function (message) {
	if (message === 'ok') {
		// training worked, can request new models
	} else {
			console.error(message);
		}
});

// update model on new model reception from server :
socket.on('models', function (models) {
	console.log(models);
	var m = models.models;
	if (Array.isArray(m) && m.length > 0) {
		//gmmDecoder.setModel(m[m.length - 1]);
		console.log(models.message);
		console.log(m[m.length - 1]);
		hhmmDecoder.setModel(m[m.length - 1]);
	} else {
		console.log(models.message);
	}
});

// =================== UI interaction =================== //

recbut.addEventListener('click', function () {
	var state = recbut.className;
	if (state === 'rec-but') {
		recbut.className = 'stop-but';
		recbut.innerHTML = 'STOP';
		sendbut.disabled = true;
		// start recording some sensor and gps data
		dataRecorder.start();
	} else {
		recbut.className = 'rec-but';
		recbut.innerHTML = 'REC';
		sendbut.disabled = false;
		// stop recording data
		dataRecorder.stop();
	}
});

sendbut.addEventListener('click', function () {
	var move = movelist.options[movelist.selectedIndex].text;
	var res = confirm('You are about to send data labeled with "' + move + '". Confirm ?');
	if (res === true) {
		// send recorded data to server :
		var phrase = dataRecorder.getRecordedPhrase();
		phrase.label = move;
		phrase.date = new Date();
		socket.emit('writePhrase', phrase);
		sendbut.disabled = true;
	} else {
		sendbut.disabled = false;
	}
});

getmodelsbut.addEventListener('click', function () {
	socket.emit('trainModels');
});

// ===================== PAGE INITIALIZATION =================== //

(function () {
	var updateLikeliest = function updateLikeliest(del) {
		//let newLabel = gmmDecoder.likeliestLabel;

		if (hhmmDecoder.likeliestLabel !== likeliest.innerHTML) {
			//changeSounds(hhmmDecoder.likeliestLabel);
		}
		likeliest.innerHTML = hhmmDecoder.likeliestLabel; //newLabel;
		setTimeout(updateLikeliest, del);
	};

	updateLikeliest(200);
})();
//# sourceMappingURL=data:application/json;base64,